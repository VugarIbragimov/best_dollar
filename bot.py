import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
from selenium.webdriver.common.by import By
from slugify import slugify

from create_driver import create_driver
from utils import available_cities, process_data

load_dotenv()
logging.basicConfig(level=logging.INFO)

load_dotenv()
tg_token = os.getenv('BOT_TOKEN')

bot = Bot(token=tg_token)
dp = Dispatcher(storage=MemoryStorage())

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –ø–æ –¶–ë"),
            KeyboardButton(text="–ö—É–ø–∏—Ç—å $"),
            KeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å $"),
        ],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å—Ç–≤–∏–µ"
)


class FormStates:
    waiting_for_city = 'waiting_for_city'


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=keyboard)


@dp.message(Command('cities'))
async def show_available_cities(message: types.Message):
    available_cities_text = "\n".join(available_cities)
    response = f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö:\n{available_cities_text}"
    await message.answer(response)


@dp.message(Command('help'))
async def show_avaiable_commands(message: types.Message):
    response = """–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ üí≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö:

1. –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å üí≤ –ø–æ –¶–ë: –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ø–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É –ë–∞–Ω–∫—É –†–æ—Å—Å–∏–∏.

2. –ö—É–ø–∏—Ç—å üí≤: –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ª—É—á—à–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–ª–∞—Ä–∞ –≤ –±–∞–Ω–∫–∞—Ö –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.

3. –ü—Ä–æ–¥–∞—Ç—å üí≤: –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –¥–æ–ª–ª–∞—Ä, –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –±–∞–Ω–∫–∏ —Å –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
- üëÜ–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—à–µ.üëÜ
- –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.
- –í–≤–µ–¥–∏—Ç–µ /cities –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.üèô
- –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.‚ÑπÔ∏è
"""
    await message.answer(response)


@dp.message(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –ø–æ –¶–ë")
async def action_check_cbr(message: types.Message):

    url = "https://quote.rbc.ru/ticker/72413?ysclid=loddzdqpq6156801105"
    driver = create_driver(url)
    try:
        elems = driver.find_element(By.CLASS_NAME, "chart__info__sum")
    except Exception as ex:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –ø–æ –¶–ë. –û—à–∏–±–∫–∞ {ex}")
    dollar_rate = elems.text.replace('‚ÇΩ', '')
    await message.reply(f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ø–æ –¶–ë: {dollar_rate} ‚ÇΩ")


@dp.message(lambda message: message.text in ["–ö—É–ø–∏—Ç—å $", "–ü—Ä–æ–¥–∞—Ç—å $"])
async def action_ask_city(message: types.Message, state: FSMContext):

    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å $?")
    await state.update_data(operation_type=message.text)
    return FormStates.waiting_for_city


@dp.message()
async def process_city(message: types.Message, state: FSMContext):

    city = message.text

    slug_city = slugify(city)
    if city not in available_cities:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è')
        return

    url = f'https://www.banki.ru/products/currency/cash/{slug_city}/?buttonId=2'
    driver = create_driver(url)

    data = await state.get_data()
    operation_type = data.get('operation_type')

    if operation_type == "–ö—É–ø–∏—Ç—å $":

        sorted_data_list = await process_data(driver, operation_type)

        result = f"–ö—É—Ä—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ üí≤ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()}:\n\n"

        for bank_data in sorted_data_list:
            result += f"üè¶–ë–∞–Ω–∫: {bank_data['bank_name']}\nüîÑ –ö—É—Ä—Å: {bank_data['exchange_rate']}\nüìç –ê–¥—Ä–µ—Å: {bank_data['address']}\n\n"

    elif operation_type == "–ü—Ä–æ–¥–∞—Ç—å $":

        url = f'https://www.banki.ru/products/currency/cash/{slug_city}/?buttonId=3'
        driver = create_driver(url)

        sorted_data_list = await process_data(driver, operation_type)

        result = f"–ö—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üí≤ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()}:\n\n"

        for bank_data in sorted_data_list:
            result += f"üè¶–ë–∞–Ω–∫: {bank_data['bank_name']}\n üîÑ–ö—É—Ä—Å: {bank_data['exchange_rate']}\nüìç –ê–¥—Ä–µ—Å: {bank_data['address']}\n\n"

    else:
        result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"

    await message.answer(result)
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
